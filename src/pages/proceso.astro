---
import Layout from "../layouts/Layout.astro";
import { Picture, inferRemoteSize } from "astro:assets";
import { ProcessSchema } from "@/types";
const url = `${import.meta.env.API_URL}/pages?slug=proceso`;
const res = await fetch(url);
const json = await res.json();
const data = ProcessSchema.parse(json[0]);
const processKeys = Array.from({ length: 5 }, (_, i) => `process_${i + 1}`);
---

<Layout
  title={data.title.rendered}
  subtitle={data.acf.subtitle}
  bgImage={data.featured_images.full.url}
>
  <div
    class="text-xl space-y-3 mt-10 lg:mt-0"
    set:html={data.content.rendered}
  />
  <div class="mt-10 space-y-10">
    {
      processKeys.map(async (key, i) => {
        const { title, description, image } = data.acf[key];
        const { width, height } = await inferRemoteSize(image);
        return (
          <section class="flex flex-col lg:flex-row lg:items-center gap-10">
            <div
              class={`w-full lg:w-1/2 ${i % 2 === 0 ? "lg:order-1" : "lg:order-2"} `}
            >
              <Picture
                src={image}
                alt={`Imagen de ${title}`}
                width={width}
                height={height}
                formats={["avif", "webp"]}
              />
            </div>
            <div
              class={`w-full lg:w-1/2 ${i % 2 === 0 ? "lg:order-2" : "lg:order-1"}`}
            >
              <h3 class="text-coffee-900 font-black text-4xl pb-10 uppercase">
                {title}
              </h3>
              <p class="text-lg">{description}</p>
            </div>
          </section>
        );
      })
    }
  </div>
</Layout>
